@page "/sendnotification"
@using AdaptiveBlocks;
@using InteractiveNotifs.HubClientSdk;

<h1>Send notification</h1>

<p>Current notifications: 0</p>

<textarea @bind="Payload"></textarea>

@if (IsPayloadInvalid)
{
<p class="error">Invalid payload</p>
}

@if (!Sending)
{
<button class="btn btn-primary" @onclick="SendNotif">Send notification</button>
}
else
{
<button class="btn btn-primary" disabled>Sending...</button>
}

@if (LastSendResult != null)
{
<table class="send-result">
    <tr>
        <th>Device</th>
        <th>Result</th>
    </tr>
    @foreach (var result in LastSendResult.Results)
    {
        <tr>
            <td>@result.Key.Type.ToString()</td>
            <td>@result.Value</td>
        </tr>
    }
</table>
}

<div class="previews">

    @if (CurrentBlock?.View?.Content != null)
    {
        <InteractiveNotifs.HubBlazorApp.Components.Previews.AndroidNotification Notification="@InteractiveNotifs.HubBlazorApp.ViewModels.AndroidNotificationViewModel.Create(CurrentBlock)"/>
    }

</div>


@code {
    private string _payload;
    public string Payload
    {
        get => _payload;
        set
        {
            _payload = value;
            OnPayloadChanged();
        }
    }

    public bool IsPayloadInvalid { get; private set; }

    public AdaptiveBlock CurrentBlock { get; private set; }

    public SendNotificationResult LastSendResult { get; private set; }

    private void OnPayloadChanged()
    {
        try
        {
            var newBlock = AdaptiveBlock.Parse(Payload).Block;
            if (newBlock != null)
            {
                CurrentBlock = newBlock;
                IsPayloadInvalid = false;
                return;
            }
        }
        catch
        {
        }

        IsPayloadInvalid = true;
    }

    public bool Sending { get; private set; }

    public async Task SendNotif()
    {
        LastSendResult = null;

        if (Payload == null)
        {
            return;
        }

        try
        {
            //await new HttpClient().GetStringAsync("https://msn.com");
            HubClient client = new HubClient();
            var result = await client.SendNotificationAsync(new Api.Notification()
            {
                AdaptiveBlock = Payload
            });

            LastSendResult = result;
        }
        catch { }

        Sending = false;
    }
}
